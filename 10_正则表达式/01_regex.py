#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
Created on 2018年11月23日

@author: zzk
'''
# 正则表达式
import re

flag = re.match(r'^\d{3}-\d{3,8}', '010-111')
# match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None
if flag:
    print('匹配.')
else:
    print('不匹配')

# 切分字符串
# 正常情况无法识别连续的空格
s ='a b c     dsadsad'
print(s.split(' '))#['a', 'b', 'c', '', '', '', '', 'dsadsad']
# 使用正则表达式
print(re.split(r'\s+',s))#['a', 'b', 'c', 'dsadsad']

# 除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。
# 用()表示的就是要提取的分组（Group）
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print(m.group(0))
print(m.group(1))
print(m.group(2))
# 注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。
t = '19:05:30'
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
print(m)

# 贪婪匹配
# 正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。
print(re.match(r'^(\d+)(0*)$', '102300').groups())
# 由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。
# 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：
print(re.match(r'^(\d+?)(0*)$', '102300').groups())

# 编译
# 当我们在Python中使用正则表达式时，re模块内部会干两件事情：
#     编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
#     用编译后的正则表达式去匹配字符串。
# 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
print(re_telephone.match('010-12345').groups())
print(re_telephone.match('010-8086').groups())
# 编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。
